"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.retries import RetryConfig
from beezy_ai import models
from beezy_ai._hooks import SDKHooks
from beezy_ai.chat import Chat
from beezy_ai.embeddings import Embeddings
from beezy_ai.files import Files
from beezy_ai.fim import Fim
from beezy_ai.fine_tuning import FineTuning
from beezy_ai.models_ import Models
from beezy_ai.types import Nullable, UNSET
import beezy_ai.utils as utils
import httpx
from typing import Callable, Dict, Optional, Union

class BeezyAI(BaseSDK):
    r"""BeezyAI API: Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.beezy.ai) to get access and read the [docs](https://docs.beezy.ai) to learn how to use it."""
    chat: Chat
    r"""Chat Completion API"""
    fim: Fim
    r"""Fill-in-the-middle API"""
    embeddings: Embeddings
    r"""Embeddings API"""
    models: Models
    r"""Model Management API"""
    files: Files
    r"""Files API"""
    fine_tuning: FineTuning
    r"""Fine-tuning API"""
    def __init__(
        self,
        api_key_auth: Union[str, Callable[[], str]],
        server: Optional[str] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: Optional[Nullable[RetryConfig]] = UNSET,
        timeout_config: Optional[int] = None
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param api_key_auth: The api_key_auth required for authentication
        :param server: The server by name to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_config: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security = None
        if callable(api_key_auth):
            security = lambda: models.Security(api_key_auth = api_key_auth()) # pylint: disable=unnecessary-lambda-assignment
        else:
            security = models.Security(api_key_auth = api_key_auth)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    

        BaseSDK.__init__(self, SDKConfiguration(
            client=client,
            async_client=async_client,
            security=security,
            server_url=server_url,
            server=server,
            retry_config=retry_config,
            timeout_config=timeout_config
        ))

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.chat = Chat(self.sdk_configuration)
        self.fim = Fim(self.sdk_configuration)
        self.embeddings = Embeddings(self.sdk_configuration)
        self.models = Models(self.sdk_configuration)
        self.files = Files(self.sdk_configuration)
        self.fine_tuning = FineTuning(self.sdk_configuration)
    
