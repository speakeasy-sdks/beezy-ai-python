"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from beezy_ai.types import BaseModel, Nullable
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class ChatCompletionResponseFunctionCallFunctionTypedDict(TypedDict):
    name: NotRequired[str]
    arguments: NotRequired[str]
    

class ChatCompletionResponseFunctionCallFunction(BaseModel):
    name: Optional[str] = None
    arguments: Optional[str] = None
    

class ToolCallsTypedDict(TypedDict):
    function: NotRequired[ChatCompletionResponseFunctionCallFunctionTypedDict]
    

class ToolCalls(BaseModel):
    function: Optional[ChatCompletionResponseFunctionCallFunction] = None
    

class ChatCompletionResponseFunctionCallMessageTypedDict(TypedDict):
    role: NotRequired[str]
    content: NotRequired[str]
    tool_calls: NotRequired[List[ToolCallsTypedDict]]
    

class ChatCompletionResponseFunctionCallMessage(BaseModel):
    role: Optional[str] = None
    content: Optional[str] = None
    tool_calls: Optional[List[ToolCalls]] = None
    

class ChatCompletionResponseFunctionCallFinishReason(str, Enum):
    STOP = "stop"
    LENGTH = "length"
    MODEL_LENGTH = "model_length"
    ERROR = "error"
    TOOL_CALLS = "tool_calls"


class ChatCompletionResponseFunctionCallChoicesTypedDict(TypedDict):
    index: int
    finish_reason: Nullable[ChatCompletionResponseFunctionCallFinishReason]
    message: NotRequired[ChatCompletionResponseFunctionCallMessageTypedDict]
    

class ChatCompletionResponseFunctionCallChoices(BaseModel):
    index: int
    finish_reason: Nullable[ChatCompletionResponseFunctionCallFinishReason]
    message: Optional[ChatCompletionResponseFunctionCallMessage] = None
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["message"]
        nullable_fields = ["finish_reason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class ChatCompletionResponseFunctionCallUsageTypedDict(TypedDict):
    prompt_tokens: int
    completion_tokens: int
    total_tokens: int
    

class ChatCompletionResponseFunctionCallUsage(BaseModel):
    prompt_tokens: int
    completion_tokens: int
    total_tokens: int
    

class ChatCompletionResponseFunctionCallTypedDict(TypedDict):
    id: NotRequired[str]
    object: NotRequired[str]
    created: NotRequired[int]
    model: NotRequired[str]
    choices: NotRequired[List[ChatCompletionResponseFunctionCallChoicesTypedDict]]
    usage: NotRequired[ChatCompletionResponseFunctionCallUsageTypedDict]
    

class ChatCompletionResponseFunctionCall(BaseModel):
    id: Optional[str] = None
    object: Optional[str] = None
    created: Optional[int] = None
    model: Optional[str] = None
    choices: Optional[List[ChatCompletionResponseFunctionCallChoices]] = None
    usage: Optional[ChatCompletionResponseFunctionCallUsage] = None
    
