"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from .deltamessage import DeltaMessage, DeltaMessageTypedDict
from .finishreason import FinishReason
from beezy_ai.types import BaseModel, Nullable
from pydantic import model_serializer
from typing import TypedDict


class ChatCompletionResponseStreamChoiceTypedDict(TypedDict):
    index: int
    delta: DeltaMessageTypedDict
    finish_reason: Nullable[FinishReason]
    

class ChatCompletionResponseStreamChoice(BaseModel):
    index: int
    delta: DeltaMessage
    finish_reason: Nullable[FinishReason]
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["finish_reason"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
