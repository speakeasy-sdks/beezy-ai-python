"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from beezy_ai.types import BaseModel
from beezy_ai.utils import FieldMetadata, MultipartFormMetadata
import io
import pydantic
from typing import Final, IO, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


class FileTypedDict(TypedDict):
    file_name: str
    content: Union[bytes, IO[bytes], io.BufferedReader]
    content_type: NotRequired[str]
    

class File(BaseModel):
    file_name: Annotated[str, pydantic.Field(alias="file"), FieldMetadata(multipart=True)]
    content: Annotated[Union[bytes, IO[bytes], io.BufferedReader], pydantic.Field(alias=""), FieldMetadata(multipart=MultipartFormMetadata(content=True))]
    content_type: Annotated[Optional[str], pydantic.Field(alias="Content-Type"), FieldMetadata(multipart=True)] = None
    

class UploadFileTypedDict(TypedDict):
    file: FileTypedDict
    r"""The File object (not file name) to be uploaded."""
    

class UploadFile(BaseModel):
    file: Annotated[File, pydantic.Field(alias=""), FieldMetadata(multipart=MultipartFormMetadata(file=True))]
    r"""The File object (not file name) to be uploaded."""
    PURPOSE: Annotated[Final[str], pydantic.Field(alias="purpose"), FieldMetadata(multipart=True)] = "fine-tune"
    r"""The intended purpose of the uploaded file. Only accepts fine-tuning (`fine-tune`) for now."""
    
