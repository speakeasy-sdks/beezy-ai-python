"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from .chatcompletionrole import ChatCompletionRole
from beezy_ai.types import BaseModel, Nullable
import pydantic
from pydantic import model_serializer
from typing import Final, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ChatFunctionCallMessagesTypedDict(TypedDict):
    role: NotRequired[ChatCompletionRole]
    content: NotRequired[str]
    

class ChatFunctionCallMessages(BaseModel):
    role: Optional[ChatCompletionRole] = None
    content: Optional[str] = None
    

class ParametersTypedDict(TypedDict):
    r"""The function parameters, defined using a JSON Schema object. If omitted, the function is considered to have an empty parameter list.

    """
    
    

class Parameters(BaseModel):
    r"""The function parameters, defined using a JSON Schema object. If omitted, the function is considered to have an empty parameter list.

    """
    
    

class FunctionTypedDict(TypedDict):
    r"""The function properties.

    """
    
    name: str
    r"""The name of the function to be called. Must be a-z,A-Z,0-9 or contain underscores and dashes, with a maximum length of 64.

    """
    description: NotRequired[str]
    r"""The description of the function to help the model determine when and how to invoke it.

    """
    parameters: NotRequired[ParametersTypedDict]
    r"""The function parameters, defined using a JSON Schema object. If omitted, the function is considered to have an empty parameter list.

    """
    

class Function(BaseModel):
    r"""The function properties.

    """
    
    name: str
    r"""The name of the function to be called. Must be a-z,A-Z,0-9 or contain underscores and dashes, with a maximum length of 64.

    """
    description: Optional[str] = None
    r"""The description of the function to help the model determine when and how to invoke it.

    """
    parameters: Optional[Parameters] = None
    r"""The function parameters, defined using a JSON Schema object. If omitted, the function is considered to have an empty parameter list.

    """
    

class ToolsTypedDict(TypedDict):
    type: str
    r"""The type of the tool. Currently, only `function` is supported.

    """
    function: FunctionTypedDict
    r"""The function properties.

    """
    

class Tools(BaseModel):
    type: str
    r"""The type of the tool. Currently, only `function` is supported.

    """
    function: Function
    r"""The function properties.

    """
    

class ChatFunctionCallTypedDict(TypedDict):
    model: str
    r"""ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.

    """
    messages: List[ChatFunctionCallMessagesTypedDict]
    r"""The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.
    When role is `tool`, the properties should contain `tool_call_id` (string or `null`).

    """
    temperature: NotRequired[Nullable[float]]
    r"""What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: NotRequired[Nullable[float]]
    r"""Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    max_tokens: NotRequired[Nullable[int]]
    r"""The maximum number of tokens to generate in the completion.

    The token count of your prompt plus `max_tokens` cannot exceed the model's context length.

    """
    safe_prompt: NotRequired[bool]
    r"""Whether to inject a safety prompt before all conversations.

    """
    tools: NotRequired[List[ToolsTypedDict]]
    r"""A list of available tools for the model. Use this to specify functions for which the model can generate JSON inputs.

    """
    tool_choice: NotRequired[str]
    r"""Specifies if/how functions are called. If set to `none` the model won't call a function and will generate a message instead. If set to `auto` the model can choose to either generate a message or call a function. If set to `any` the model is forced to call a function.

    """
    random_seed: NotRequired[Nullable[int]]
    r"""The seed to use for random sampling. If set, different calls will generate deterministic results.

    """
    

class ChatFunctionCall(BaseModel):
    model: str
    r"""ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.

    """
    messages: List[ChatFunctionCallMessages]
    r"""The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.
    When role is `tool`, the properties should contain `tool_call_id` (string or `null`).

    """
    temperature: Optional[Nullable[float]] = 0.7
    r"""What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: Optional[Nullable[float]] = 1
    r"""Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    max_tokens: Optional[Nullable[int]] = None
    r"""The maximum number of tokens to generate in the completion.

    The token count of your prompt plus `max_tokens` cannot exceed the model's context length.

    """
    safe_prompt: Optional[bool] = False
    r"""Whether to inject a safety prompt before all conversations.

    """
    tools: Optional[List[Tools]] = None
    r"""A list of available tools for the model. Use this to specify functions for which the model can generate JSON inputs.

    """
    tool_choice: Optional[str] = "auto"
    r"""Specifies if/how functions are called. If set to `none` the model won't call a function and will generate a message instead. If set to `auto` the model can choose to either generate a message or call a function. If set to `any` the model is forced to call a function.

    """
    random_seed: Optional[Nullable[int]] = None
    r"""The seed to use for random sampling. If set, different calls will generate deterministic results.

    """
    STREAM: Annotated[Final[bool], pydantic.Field(alias="stream")] = True
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["temperature", "top_p", "max_tokens", "safe_prompt", "tools", "tool_choice", "random_seed"]
        nullable_fields = ["temperature", "top_p", "max_tokens", "random_seed"]
        null_default_fields = ["max_tokens", "random_seed"]

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        

class ChatFunctionCall1TypedDict(TypedDict):
    model: str
    r"""ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.

    """
    messages: List[ChatFunctionCallMessagesTypedDict]
    r"""The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.
    When role is `tool`, the properties should contain `tool_call_id` (string or `null`).

    """
    temperature: NotRequired[Nullable[float]]
    r"""What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: NotRequired[Nullable[float]]
    r"""Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    max_tokens: NotRequired[Nullable[int]]
    r"""The maximum number of tokens to generate in the completion.

    The token count of your prompt plus `max_tokens` cannot exceed the model's context length.

    """
    safe_prompt: NotRequired[bool]
    r"""Whether to inject a safety prompt before all conversations.

    """
    tools: NotRequired[List[ToolsTypedDict]]
    r"""A list of available tools for the model. Use this to specify functions for which the model can generate JSON inputs.

    """
    tool_choice: NotRequired[str]
    r"""Specifies if/how functions are called. If set to `none` the model won't call a function and will generate a message instead. If set to `auto` the model can choose to either generate a message or call a function. If set to `any` the model is forced to call a function.

    """
    random_seed: NotRequired[Nullable[int]]
    r"""The seed to use for random sampling. If set, different calls will generate deterministic results.

    """
    

class ChatFunctionCall1(BaseModel):
    model: str
    r"""ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.

    """
    messages: List[ChatFunctionCallMessages]
    r"""The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.
    When role is `tool`, the properties should contain `tool_call_id` (string or `null`).

    """
    temperature: Optional[Nullable[float]] = 0.7
    r"""What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: Optional[Nullable[float]] = 1
    r"""Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    max_tokens: Optional[Nullable[int]] = None
    r"""The maximum number of tokens to generate in the completion.

    The token count of your prompt plus `max_tokens` cannot exceed the model's context length.

    """
    safe_prompt: Optional[bool] = False
    r"""Whether to inject a safety prompt before all conversations.

    """
    tools: Optional[List[Tools]] = None
    r"""A list of available tools for the model. Use this to specify functions for which the model can generate JSON inputs.

    """
    tool_choice: Optional[str] = "auto"
    r"""Specifies if/how functions are called. If set to `none` the model won't call a function and will generate a message instead. If set to `auto` the model can choose to either generate a message or call a function. If set to `any` the model is forced to call a function.

    """
    random_seed: Optional[Nullable[int]] = None
    r"""The seed to use for random sampling. If set, different calls will generate deterministic results.

    """
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["temperature", "top_p", "max_tokens", "safe_prompt", "tools", "tool_choice", "random_seed"]
        nullable_fields = ["temperature", "top_p", "max_tokens", "random_seed"]
        null_default_fields = ["max_tokens", "random_seed"]

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
