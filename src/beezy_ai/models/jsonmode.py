"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from .chatcompletionrole import ChatCompletionRole
from beezy_ai.types import BaseModel, Nullable
import pydantic
from pydantic import model_serializer
from typing import Final, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class JSONModeMessagesTypedDict(TypedDict):
    role: NotRequired[ChatCompletionRole]
    content: NotRequired[str]
    

class JSONModeMessages(BaseModel):
    role: Optional[ChatCompletionRole] = None
    content: Optional[str] = None
    

class ResponseFormatTypedDict(TypedDict):
    r"""An object specifying the format that the model must output. Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is in JSON.
    When using JSON mode you MUST also instruct the model to produce JSON yourself with a system or a user message.

    """
    
    type: NotRequired[str]
    

class ResponseFormat(BaseModel):
    r"""An object specifying the format that the model must output. Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is in JSON.
    When using JSON mode you MUST also instruct the model to produce JSON yourself with a system or a user message.

    """
    
    type: Optional[str] = None
    

class JSONModeTypedDict(TypedDict):
    model: str
    r"""ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.

    """
    messages: List[JSONModeMessagesTypedDict]
    r"""The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.

    """
    response_format: NotRequired[ResponseFormatTypedDict]
    r"""An object specifying the format that the model must output. Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is in JSON.
    When using JSON mode you MUST also instruct the model to produce JSON yourself with a system or a user message.

    """
    temperature: NotRequired[Nullable[float]]
    r"""What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: NotRequired[Nullable[float]]
    r"""Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    max_tokens: NotRequired[Nullable[int]]
    r"""The maximum number of tokens to generate in the completion.

    The token count of your prompt plus `max_tokens` cannot exceed the model's context length.

    """
    safe_prompt: NotRequired[bool]
    r"""Whether to inject a safety prompt before all conversations.

    """
    random_seed: NotRequired[Nullable[int]]
    r"""The seed to use for random sampling. If set, different calls will generate deterministic results.

    """
    

class JSONMode(BaseModel):
    model: str
    r"""ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.

    """
    messages: List[JSONModeMessages]
    r"""The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.

    """
    response_format: Optional[ResponseFormat] = None
    r"""An object specifying the format that the model must output. Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is in JSON.
    When using JSON mode you MUST also instruct the model to produce JSON yourself with a system or a user message.

    """
    temperature: Optional[Nullable[float]] = 0.7
    r"""What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

    We generally recommend altering this or `top_p` but not both.

    """
    top_p: Optional[Nullable[float]] = 1
    r"""Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

    We generally recommend altering this or `temperature` but not both.

    """
    max_tokens: Optional[Nullable[int]] = None
    r"""The maximum number of tokens to generate in the completion.

    The token count of your prompt plus `max_tokens` cannot exceed the model's context length.

    """
    safe_prompt: Optional[bool] = None
    r"""Whether to inject a safety prompt before all conversations.

    """
    random_seed: Optional[Nullable[int]] = None
    r"""The seed to use for random sampling. If set, different calls will generate deterministic results.

    """
    STREAM: Annotated[Final[bool], pydantic.Field(alias="stream")] = True
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["response_format", "temperature", "top_p", "max_tokens", "safe_prompt", "random_seed"]
        nullable_fields = ["temperature", "top_p", "max_tokens", "random_seed"]
        null_default_fields = ["max_tokens", "random_seed"]

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
