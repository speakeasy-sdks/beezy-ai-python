"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
from .functioncall import FunctionCall, FunctionCallTypedDict
from .tooltype import ToolType
from beezy_ai.types import BaseModel, Nullable
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import NotRequired


class ToolCallTypedDict(TypedDict):
    id: Nullable[str]
    function: FunctionCallTypedDict
    type: NotRequired[ToolType]
    

class ToolCall(BaseModel):
    id: Nullable[str]
    function: FunctionCall
    type: Optional[ToolType] = ToolType.FUNCTION
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["type"]
        nullable_fields = ["id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None:
                m[k] = val
            elif not k in optional_fields or (
                    k in optional_fields
                    and k in nullable_fields
                    and (self.__pydantic_fields_set__.intersection({n}) or k in null_default_fields) # pylint: disable=no-member
                ):
                m[k] = val

        return m
        
