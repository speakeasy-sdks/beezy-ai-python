"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from beezy_ai import models
from beezy_ai._hooks import HookContext
from beezy_ai.types import Nullable
import beezy_ai.utils as utils
from typing import Optional, Union

class Fim(BaseSDK):
    r"""Fill-in-the-middle API"""
    
    
    def create(
        self, *,
        prompt: str,
        model: Nullable[str],
        suffix: Optional[Nullable[str]] = None,
        temperature: Optional[Nullable[float]] = None,
        top_p: Optional[Nullable[float]] = None,
        max_tokens: Optional[Nullable[int]] = None,
        min_tokens: Optional[Nullable[int]] = None,
        stream: Optional[bool] = None,
        random_seed: Optional[Nullable[int]] = None,
        stop: Optional[Union[models.Stop, models.StopTypedDict]] = None,
        server_url: Optional[str] = None,
        timeout_config: Optional[int] = None,
    ) -> models.FIMCompletionResponse:
        r"""Create FIM Completions

        :param prompt: The text/code to complete.
        :param model: ID of the model to use. Only compatible for now with:   - `codestral-2405`   - `codestral-latest`
        :param suffix: Optional text/code that adds more context for the model. When given a `prompt` and a `suffix` the model will fill what is between them. When `suffix` is not provided, the model will simply execute completion starting with `prompt`.
        :param temperature: What sampling temperature to use, between 0.0 and 1.0.  Higher values like 0.8 will make the outptu more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
        :param top_p: Nucleus sampling, where the model considers the results of the tokens with with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
        :param max_tokens: The maximum number of tokens to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
        :param min_tokens: The minimum number of tokens to generate in the completion.
        :param stream: Whether to stream back partial progress. If set, tokens will be sent as data-only server-side events as they become available, with the stream terminated by a data: [DONE] message.\"  Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
        :param random_seed: The seed to use for random sampling. If set, different calls will generate deterministic results.
        :param stop: 
        :param server_url: Override the default server URL for this method
        :param timeout_config: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.FIMCompletionRequest(
            prompt=prompt,
            suffix=suffix,
            model=model,
            temperature=temperature,
            top_p=top_p,
            max_tokens=max_tokens,
            min_tokens=min_tokens,
            stream=stream,
            random_seed=random_seed,
            stop=stop,
        )
        
        req = self.build_request(
            method="POST",
            path="/fim/completions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", models.FIMCompletionRequest),
            timeout_config=timeout_config,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="createFIMCompletion", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.FIMCompletionResponse])
        if utils.match_response(http_res, ["4XX","5XX"], "*"):
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        prompt: str,
        model: Nullable[str],
        suffix: Optional[Nullable[str]] = None,
        temperature: Optional[Nullable[float]] = None,
        top_p: Optional[Nullable[float]] = None,
        max_tokens: Optional[Nullable[int]] = None,
        min_tokens: Optional[Nullable[int]] = None,
        stream: Optional[bool] = None,
        random_seed: Optional[Nullable[int]] = None,
        stop: Optional[Union[models.Stop, models.StopTypedDict]] = None,
        server_url: Optional[str] = None,
        timeout_config: Optional[int] = None,
    ) -> models.FIMCompletionResponse:
        r"""Create FIM Completions

        :param prompt: The text/code to complete.
        :param model: ID of the model to use. Only compatible for now with:   - `codestral-2405`   - `codestral-latest`
        :param suffix: Optional text/code that adds more context for the model. When given a `prompt` and a `suffix` the model will fill what is between them. When `suffix` is not provided, the model will simply execute completion starting with `prompt`.
        :param temperature: What sampling temperature to use, between 0.0 and 1.0.  Higher values like 0.8 will make the outptu more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
        :param top_p: Nucleus sampling, where the model considers the results of the tokens with with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
        :param max_tokens: The maximum number of tokens to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length.
        :param min_tokens: The minimum number of tokens to generate in the completion.
        :param stream: Whether to stream back partial progress. If set, tokens will be sent as data-only server-side events as they become available, with the stream terminated by a data: [DONE] message.\"  Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
        :param random_seed: The seed to use for random sampling. If set, different calls will generate deterministic results.
        :param stop: 
        :param server_url: Override the default server URL for this method
        :param timeout_config: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = models.FIMCompletionRequest(
            prompt=prompt,
            suffix=suffix,
            model=model,
            temperature=temperature,
            top_p=top_p,
            max_tokens=max_tokens,
            min_tokens=min_tokens,
            stream=stream,
            random_seed=random_seed,
            stop=stop,
        )
        
        req = self.build_request(
            method="POST",
            path="/fim/completions",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", models.FIMCompletionRequest),
            timeout_config=timeout_config,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="createFIMCompletion", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, Optional[models.FIMCompletionResponse])
        if utils.match_response(http_res, ["4XX","5XX"], "*"):
            raise models.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        
        content_type = http_res.headers.get("Content-Type")
        raise models.SDKError(f"Unexpected response received (code: {http_res.status_code}, type: {content_type})", http_res.status_code, http_res.text, http_res)
    
